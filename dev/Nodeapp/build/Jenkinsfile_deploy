node {
  try {
	stage('Checkout Deployment Code') { // for display purposes
		checkout(
		[
			$class: 'GitSCM', 
			branches: [
				[name: '*/${BRANCH_NAME}']
			], 
			doGenerateSubmoduleConfigurations: false, 
			extensions: [], 
			gitTool: 'Default', 
			submoduleCfg: [], 
			userRemoteConfigs: [
				[
					credentialsId: 'bitbucket-key', 
					url: 'ssh://git@del.tools.publicis.sapient.com/bdto/jenkins.git'
				]
			]
		])
	}
	stage('Load Config') { 
	 // Load Global Config
		def props = readProperties file: "build/global.properties"
	// Load App config
		def appProps = readProperties file: "build/"+env.APP+".properties"
		for (def e in mapToList(props,appProps))
			{
				env.putAt(e.key,e.value)
			}
	}
   	stage('Deploy on Environment') {
			sh 'kubectl -n devops apply -f kubernetes/'
	}
	}catch (e) {
    currentBuild.result = "FAILED"
    throw e
  } finally {
  }
  
}
@NonCPS
def mapToList(depmap,depmap1) {
    def dlist = []
    for (def entry2 in depmap) {
        dlist.add(new java.util.AbstractMap.SimpleImmutableEntry(entry2.key, entry2.value))
    }
	for (def entry3 in depmap1) {
        dlist.add(new java.util.AbstractMap.SimpleImmutableEntry(entry3.key, entry3.value))
    }
    dlist
}
